import xml.sax
import logging
from datetime import datetime
from xml.sax.saxutils import unescape
from xml.sax._exceptions import SAXParseException

# user defined Classes
import misc_util
from ProcessBillXML import LicXMLHandler
from ProcessBillXML import ConfXMLHandler

class ProcessXML:
    ''' Class will process xml from the call manager and Cisco Meeting Server.
        Make calls to the xml handlers and log output to logfiles and database.

        Parameters:
           xml_type: which xml data to process, 'devusage' or 'confspaces'
           xml_data: actual xml data returned from web Api
        
        Example:

           obj  = ProcessXML('conf_spaces',rsp.text )
           obj2 = ProcessXML('devices',rsp.text )
           obj.process_xml()
    '''

    def __init__(self, xml_type, xml_data, db_access, server_data ):
        self.serv_info  = server_data
        self.xml_type = xml_type
        self.xml_data = xml_data
        self.db_access = db_access
        self.billdata = []

        self.logger   = logging.getLogger('my_logger')
        self.logspk   = logging.getLogger('spk_error_logger')
        
    #########################################################################
    # process_xml:  
    #########################################################################
    def process_xml(self):
        ''' Process the XML data, convert and save to log file and database '''

        # call the XML handlers here to process XML data
        # handler ConfXMLHandler - parse Conference room data
        # handler LicXMLHandler  - parse Device/Usage data
        # returned data will in a list of dictionaries 

        if self.xml_type == 'conf_spaces':
           try:
               Handler = ConfXMLHandler( self.billdata )
               new_xml_data = unescape(self.xml_data, {"&apos;": "'", "&quot;": '"'})

               # parse the XML conference space info with custom handler
               xml.sax.parseString(new_xml_data, Handler)
           except SAXParseException as e:
               misc_util.log_message(self.logspk, self.serv_info,
                                   'ERROR - Conf Meeting XML Parsing,', 'sys_error', e)

           if not self.billdata:
               misc_util.log_message(self.logspk, self.serv_info,
                                   'No Conference data returned from XML parser', 'error')
           else:
               self._log_all_data()
               self.db_access.load_data_db(self.xml_type, self.billdata, self.serv_info)
        elif self.xml_type == 'devices':
           try:
               Handler = LicXMLHandler( self.billdata )

               # parse the XML device/usage info with custom handler
               xml.sax.parseString(self.xml_data, Handler)
           except SAXParseException as e:
               misc_util.log_message(self.logspk, self.serv_info,
                                   'ERROR - Device/Usage XML Parsing,', 'sys_error', e)
           if not self.billdata:
               misc_util.log_message(self.logspk, self.serv_info,
                                   'No Device/User data returned from XML parser', 'error')
           else:
               self._log_all_data()
               self.db_access.load_data_db(self.xml_type, self.billdata, self.serv_info)


    ##########################################################################
    # _log_all_data:
    ##########################################################################
    def _log_all_data(self):
        ''' logs data to logger file and to the billing database '''
        key_tags = ['coSpace id', 'name', 'autogenerated', 'uri', 'callId']

        loginfo = ''
        tag_err = []

        if self.xml_type == 'conf_spaces':
           for tmp in self.billdata:
              if 'total_cospaces' in tmp:
                 loginfo = "coSpace_Total:" + tmp['total_cospaces'] + ','
              else:
                 tag_err = [x for x in key_tags if x not in tmp]
                 if not tag_err:
                    if 'secondaryUri' not in tmp:
                       loginfo += 'secondaryUri:None,'
                    for k,v in tmp.items():
                        loginfo += k + ':' + v + ','
                 else:
                    misc_util.log_message(self.logspk, self.serv_info,
                                   'Missing conference meeting XML tag data', 'error')
           
           misc_util.log_message(self.logger, self.serv_info, loginfo, 'info')
        elif self.xml_type == 'devices':
           for tmp in self.billdata:
               for k,v in tmp.items():
                 loginfo += k + ':' + v + ','

               misc_util.log_message(self.logger, self.serv_info, loginfo, 'info')
               loginfo = ''

