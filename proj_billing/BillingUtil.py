import xml.sax
import logging
from datetime import datetime
import mysql.connector as mariadb
from xml.sax.saxutils import unescape
from xml.sax._exceptions import SAXParseException

# user defined Classes
from ProcessBillXML import LicXMLHandler
from ProcessBillXML import ConfXMLHandler

class ProcessXML:
    def __init__(self, xml_type, xml_data, db_conn, cursor ):
        self.xml_type = xml_type
        self.xml_data = xml_data
        self.db_conn  = db_conn
        self.cursor   = cursor
        self.billdata = []
        self.logger   = logging.getLogger('my_logger')


    #########################################################################
    # process_xml:  
    #########################################################################
    def process_xml(self):
        ''' Process the XML data, convert and save to log file and database '''

        # call the XML handlers here to process XML data
        # handler ConfXMLHandler - parse Conference room data
        # handler LicXMLHandler  - parse Device/Usage data
        # returned data will be save to a file in json format
        if self.xml_type == 'conf_spaces':
           self.logger.info('Call ConfXMLHandler, processing Conference Room XML data...')

           try:
               Handler = ConfXMLHandler( self.billdata )
               new_xml_data = unescape(self.xml_data, {"&apos;": "'", "&quot;": '"'})
               xml.sax.parseString(new_xml_data, Handler)
           except SAXParseException as e:
               self.logger.error('Line: %d, msg: %s' % (e.getLiineNumber(), e.message)) 

           if not self.billdata:
               self.logger.error("No Conference room data returned from the XML parser...")
           else:
               self.logger.info('Conference Room XML data processed ok')
               self._log_all_data()
               
               if self.db_conn:
                  self._log_all_data_db()
        elif self.xml_type == 'devices':
           try:
               self.logger.info('Call LicXMLHandler, processing Device/User XML data...')
               Handler = LicXMLHandler( self.billdata )
               xml.sax.parseString(self.xml_data, Handler)
           except SAXParseException as e:
               self.logger.error('Line: %d, msg: %s' % (e.getLiineNumber(), e.message))

           if not self.billdata:
               self.logger.error("No Device/User data returned from the XML parser...")
           else:
               self.logger.info('Devices/Usage XML data processed ok')
               self._log_all_data()

               if self.db_conn:
                  self._log_all_data_db()


    ##########################################################################
    # log_all_data:
    ##########################################################################
    def _log_all_data(self):

        if self.xml_type == 'conf_spaces':
           for tmp in self.billdata:
              if 'total_cospaces' in tmp:
                 self.logger.info('Total coSpaces:%s' % tmp['total_cospaces'])
              else:
                 self.logger.info('coSpaceId:%s,name:%s,autoGenerated:%s,uri:%s,callId:%s,secondaryUri:%s'
                               % (tmp['coSpace_id'], tmp['name'], tmp['autogenerated'], tmp['uri'],
                                  tmp['callId'], tmp.get('secondaryUri', 'None')))
        elif self.xml_type == 'devices':
           for tmp in self.billdata:
              for k,v in tmp.items():
                  self.logger.info('%s:%s' % (k,v))

    ###########################################################################
    # log_all_data_db
    ###########################################################################
    def _log_all_data_db(self):
        inserts_ok = 0
        d = datetime.today()
        todays_date = d.strftime('%y-%m-%d') + ' ' + d.strftime('%H:%M:%S')

        if self.xml_type == 'conf_spaces':
           # setup the insert statement
           query = "INSERT INTO confspaces (coSpace_id, name, autogenerated, uri, callId, secondaryUri, data_fetched) " \
                   "VALUES (%s, %s, %s, %s, %s, %s, %s)"
       
           for tmp in self.billdata:
               if 'total_cospaces' in tmp:
                   pass 
               else:
                   try:
                       insert_data = (tmp['coSpace_id'], tmp['name'], tmp['autogenerated'],
                                      tmp['uri'], tmp['callId'], tmp.get('secondaryUri', 'None'), todays_date)
                       self.cursor.execute(query, insert_data)
                   except mariadb.Error as db_error:
                      inserts_ok = 1
                      self.logger.error('*** Insert error for coSpace id: %s, Error: %s' % (tmp['coSpace_id'], db_error))
 
           if not inserts_ok:
              self.logger.info('Insertion of conference data to database - successful')
              self.db_conn.commit()
        elif self.xml_type == 'devices':
           # setup the insert statement 
           query = "INSERT INTO devices (TotalDevices, TotalUsers, EnhancedPlus, Enhanced, TelePresence," \
                   "CuwlStandard, Basic, Essential, Timestamp, Elm, ElmLastContact, data_fetched) " \
                   "VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)"

           for tmp in self.billdata:
               try:
                  # data to be inserted into database
                  insert_data = (tmp['TotalDevices'], tmp['TotalUsers'], tmp['EnhancedPlus'], tmp['Enhanced'],
                                 tmp['TelePresence Room'], tmp['CUWL Standard'], tmp['Basic'], tmp['Essential'],
                                 tmp['Timestamp'], tmp['Elm'], tmp['ElmLastContact'], todays_date )
                  self.cursor.execute(query, insert_data)
               except mariadb.Error as db_error:
                  inserts_ok = 1
                  self.logger.error('*** Insert error for device/usage data on : %s, Error: %s' % (todays_date, db_error))

           if not inserts_ok:
              self.logger.info('Insertion of device/usage data to database - successful')
              self.db_conn.commit()
        
