# handler unit testing
# pytest -v test_XMLHandlers.py

import re
import sys
import pytest
import xml.sax
from xml.sax.saxutils import unescape
from xml.sax._exceptions import SAXParseException

sys.path.append('/root/billing')

# user modules to be tested
from XMLHandlers import LicXMLHandler
from XMLHandlers import ConfXMLHandler

@pytest.fixture(scope='class')
def class_variables(request):
   billdata_conf = []
   billdata_dev  = []
   new_xml_data = ''
   confhdler = ConfXMLHandler( billdata_conf )
   devhdler  = LicXMLHandler( billdata_dev )

   testconf = "<coSpaces total='8'><coSpace id='40126edb-8338-4916-8409-51fa2a2e9ea1'><name>Tony Stark&apos;s Space</name><autoGenerated>false</autoGenerated><uri>003036010003</uri><callId>003036010003</callId><secondaryUri>775551</secondaryUri></coSpace><coSpace id='66578d6c-5770-4548-bcb2-59d027c5eee5'><name>CMS_Scheduled_Meeting_5100</name><autoGenerated>false</autoGenerated><uri>5555100</uri><callId>5555100</callId></coSpace><coSpace id='7eec8824-aa9b-4dea-b6b0-34cb2897e57c'><name>CMS_Scheduled_Meeting_5101</name><autoGenerated>false</autoGenerated><uri>5555101</uri><callId>5555101</callId></coSpace><coSpace id='0c5c175b-4df5-4b41-be03-0ae443d48a07'><name>James Rhodes</name><autoGenerated>false</autoGenerated><uri>jrhodes.space</uri><callId>5553</callId><secondaryUri>775553</secondaryUri></coSpace><coSpace id='36f4f93e-64bc-4c71-b0aa-aea8990792bd'><name>Pepper Pott&apos;s space</name><autoGenerated>false</autoGenerated><uri>ppotts.space</uri><callId>5552</callId><secondaryUri>7775552</secondaryUri></coSpace><coSpace id='8ab9a552-841a-4f38-84c6-f703c2b0b2b6'><name>Tony Stark&apos;s Space</name><autoGenerated>false</autoGenerated><uri>tstark.space</uri><callId>5551</callId><secondaryUri>775551</secondaryUri></coSpace><coSpace id='45d3805a-d70f-473b-8673-d30fda043684'><name>Weekly Staff meeting</name><autoGenerated>false</autoGenerated><uri>meeting1</uri><callId>5590</callId><secondaryUri>775590</secondaryUri></coSpace><coSpace id='9eb6475e-755a-4b8a-97fb-8d8fcff22193'><name>tuser2</name><autoGenerated>false</autoGenerated><uri>tuser2@ctytoday.com.space</uri><callId>5551002</callId><secondaryUri>5551002</secondaryUri></coSpace></coSpaces>"

   badtestconf = "<coSpaces total='8'><coSpace id='40126edb-8338-4916-8409-51fa2a2e9ea1'>003036010003</name><autoGenerated>false</autoGenerated><uri>003036010003</uri><callId>003036010003</callId></coSpace><coSpace id='66578d6c-5770-4548-bcb2-59d027c5eee5'><name>CMS_Scheduled_Meeting_5100</name><autoGenerated>false</autoGenerated><uri>5555100</uri><callId>5555100</callId></coSpace><coSpace id='7eec8824-aa9b-4dea-b6b0-34cb2897e57c'><name>CMS_Scheduled_Meeting_5101</name><autoGenerated>false</autoGenerated><uri>5555101</uri><callId>5555101</callId></coSpace><coSpace id='0c5c175b-4df5-4b41-be03-0ae443d48a07'><name>James Rhodes</name><autoGenerated>false</autoGenerated><uri>jrhodes.space</uri><callId>5553</callId><secondaryUri>775553</secondaryUri></coSpace><coSpace id='36f4f93e-64bc-4c71-b0aa-aea8990792bd'><name>Pepper Pott&apos;s space</name><autoGenerated>false</autoGenerated><uri>ppotts.space</uri><callId>5552</callId><secondaryUri>7775552</secondaryUri></coSpace><coSpace id='8ab9a552-841a-4f38-84c6-f703c2b0b2b6'><name>Tony Stark&apos;s Space</name><autoGenerated>false</autoGenerated><uri>tstark.space</uri><callId>5551</callId><secondaryUri>775551</secondaryUri></coSpace><coSpace id='45d3805a-d70f-473b-8673-d30fda043684'><name>Weekly Staff meeting</name><autoGenerated>false</autoGenerated><uri>meeting1</uri><callId>5590</callId><secondaryUri>775590</secondaryUri></coSpace><coSpace id='9eb6475e-755a-4b8a-97fb-8d8fcff22193'><name>tuser2</name><autoGenerated>false</autoGenerated><uri>tuser2@ctytoday.com.space</uri><callId>5551002</callId><secondaryUri>5551002</secondaryUri></coSpace></coSpaces>"

   testdev = '''<?xml version='1.0' encoding='UTF-8'?><soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"><soapenv:Body><ns:executeSQLQueryResponse xmlns:ns="http://www.cisco.com/AXL/API/11.5"><return><row><name>CUWL Standard</name><value>2350</value></row><row><name>EnhancedPlus</name><value>22145</value></row><row><name>Enhanced</name><value>89312</value></row><row><name>Basic</name><value>4956</value></row><row><name>Essential</name><value>1274</value></row><row><name>TelePresence Room</name><value>78312</value></row><row><name>TotalUsers</name><value>68093</value></row><row><name>TotalDevices</name><value>30981</value></row><row><name>Timestamp</name><value>2019-02-04 08:39:27</value></row><row><name>ElmLastContact</name><value>345</value></row><row><name>Elm</name><value>10000</value></row></return></ns:executeSQLQueryResponse></soapenv:Body></soapenv:Envelope>'''

   badtestdev = '''<?xml version='1.0' encoding='UTF-8'?><soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/"><soapenv:Body><ns:executeSQLQueryResponse xmlns:ns="http://www.cisco.com/AXL/API/11.5"><return><row><name>CUWL Standard</name><value>2350</value></row><row><name>EnhancedPlus</name><value>22145</value></row><row><name>Enhanced</name><value>89312</value></row><row><name>Basic</name><value>4956</value></row><row><name>Essential</name><value>1274</value></row><row><name>TelePresence Room</name><value>78312</value></row><row><name>TotalUsers</name><value>68093</value></row><row><name>TotalDevices</name><value>30981</value></row><row><name>Timestamp</name><value>2019-02-04 08:39:27</value></row><row><name>ElmLastContact</name><value>345</value></row><row><name>Elm</name><value>10000</value></row></return></ns:executeSQLQueryResponse></soapenv:Body>'''

   request.cls.billdata     = billdata_conf
   request.cls.billdata_dev = billdata_dev
   request.cls.new_xml_data = new_xml_data
   request.cls.confhdler    = confhdler
   request.cls.devhdler     = devhdler
   request.cls.testconf     = testconf
   request.cls.badtestconf  = badtestconf
   request.cls.testdev      = testdev
   request.cls.badtestdev   = badtestdev


@pytest.mark.usefixtures('class_variables')
class TestXMLHandlers:
   def test_conf_parse_xml(self):
       self.new_xml_data = unescape(self.testconf, {"&apos;": "'", "&quot;": '"'})
       assert(not re.search('@apos', self.new_xml_data)) 

       xml.sax.parseString(self.new_xml_data, self.confhdler)
       assert(self.billdata)
  
   def test_conf_coSpaces_tag_found(self):
       assert('coSpaces' in self.billdata[0])
    
   def test_conf_coSpace_id_tag_found(self):
       assert('coSpace id' in self.billdata[1])

   def test_conf_name_tag_found(self):
       assert('name' in self.billdata[1])

   def test_conf_autoGenerated_tag_found(self):
       assert('autogenerated' in self.billdata[1])

   def test_conf_uri_tag_found(self):
       assert('uri' in self.billdata[1])

   def test_conf_callId_tag_found(self):
       assert('callId' in self.billdata[1])

   def test_conf_secondaryUri_tag_found(self):
       assert('secondaryUri' in self.billdata[1])

   def test_conf_bad_xml_except_raised(self):
       try:
          xml.sax.parseString(self.badtestconf, self.confhdler)
       except SAXParseException:
          pytest.raises(SAXParseException)

   def test_device_parse_xml(self):
       xml.sax.parseString(self.testdev, self.devhdler)
       assert(self.billdata_dev)
  
   def test_device_CUWLStandard_tag_found(self):
       assert('CUWL Standard' in self.billdata_dev[0])
    
   def test_device_EnhancedPlus_tag_found(self):
       assert('EnhancedPlus' in self.billdata_dev[0])

   def test_device_Enhanced_tag_found(self):
       assert('Enhanced' in self.billdata_dev[0])

   def test_device_Basic_tag_found(self):
       assert('Basic' in self.billdata_dev[0])

   def test_device_Essential_tag_found(self):
       assert('Essential' in self.billdata_dev[0])

   def test_device_TelePresenceRoom_tag_found(self):
       assert('TelePresence Room' in self.billdata_dev[0])

   def test_device_TotalUsers_tag_found(self):
       assert('TotalUsers' in self.billdata_dev[0])

   def test_device_TotalDevices_tag_found(self):
       assert('TotalDevices' in self.billdata_dev[0])

   def test_device_Timestamp_tag_found(self):
       assert('Timestamp' in self.billdata_dev[0])

   def test_device_ElmLastContact_tag_found(self):
       assert('ElmLastContact' in self.billdata_dev[0])

   def test_device_Elm_tag_found(self):
       assert('Elm' in self.billdata_dev[0])

   def test_device_bad_xml_except_raised(self):
       try:
          xml.sax.parseString(self.badtestdev, self.devhdler)
       except SAXParseException:
          pytest.raises(SAXParseException)

